<!doctype html>
<html>

<head>
  <title>{{appName}}</title>
  <link rel="stylesheet" type="text/css" href="/stylesheets/index.css">
  <!--<script  src="https://code.jquery.com/jquery-3.1.1.min.js"  integrity="sha256-hVVnYaiADRTO2PzUGmuLJr8BLUSjGIZsDYGmIJLv2b8="  crossorigin="anonymous"></script>-->
  <!--<script src="https://unpkg.com/@shopify/app-bridge@1"></script>-->
  <script src="https://unpkg.com/@shopify/app-bridge@1.6.7/umd/index.development.js"></script>
  <script type="text/javascript">
    var AppBridge = window['app-bridge'];
    var createApp = AppBridge.createApp;
    var actions = AppBridge.actions;
    var Redirect = actions.Redirect;
    var app;
    var accountConnected = {{accountConnected}};

    //TODO receive from template vars
    const debug = {{debug}};
    const shopOrigin = '{{shopOrigin}}';
    const apiKey = '{{apiKey}}';
    const serviceAddress = '{{serviceAddress}}';
    const state = '{{state}}';
    const scope = '{{scope}}';


    const redirectUri = serviceAddress + '/shopify/callback';
    const permissionUrl = '/oauth/authorize?client_id='
        + apiKey + '&state=' + state + '&scope=' + scope + '&redirect_uri=' + redirectUri;

    // If the current window is the 'parent', change the URL by setting location.href
    if (window.top == window.self) {
      window.location.assign('https://' + shopOrigin + '/admin' + permissionUrl);
    } else {
      app = createApp({
        apiKey: apiKey,
        shopOrigin: AppBridge.getShopOrigin(),
        debug,
      });

      const unsubscribe = app.error((data) => {
        // type will be the error type
        // action will contain the original action including its id
        // message will contain additional hints on how to fix the error
        const {type, action, message} = data;
        // Handle all errors here

        debugger;
      });

      //Redirect.create(app).dispatch(Redirect.Action.ADMIN_PATH, permissionUrl);

      const { TitleBar, } = actions;

      const titleBarOptions = {
        title: 'Settings',
        // buttons: {
        //   primary: {
        //     label: 'Save',
        //     message: 'form_sms_notifications_submit',
        //     callback: function () {
        //
        //     }
        //   },
        // }
      };

      const myTitleBar = TitleBar.create(app, titleBarOptions);

    }
  </script>

  <script type="text/javascript">
    // ShopifyApp.ready(function(){
    //   ShopifyApp.Bar.initialize({
    //     //icon: 'https://ezyslips.in/embedded/sms/images/sms_icon_60x60.png',
    //     icon: '/images/embedded_app.logo.128x128.png',
    //     title: 'Settings',
    //     buttons: {
    //       primary: {
    //         label: 'Save',
    //         message: 'form_sms_notifications_submit',
    //         callback: function(){
    //           ShopifyApp.Bar.loadingOn();
    //         }
    //       },
    //       // secondary:
    //       //   [{
    //       //     label: "Like our service? Leave us a review",
    //       //     href: "https://apps.shopify.com/sms-notifications-1#reviews-heading",
    //       //     target: "new"
    //       //   },{
    //       //     label: 'FAQ',
    //       //     href: "https://ezyslips.in/embedded/sms/faq.php",
    //       //     target: "new"
    //       //   },]
    //       /*secondary:
    //           {
    //               label: "Like our service? Leave us a review",
    //               href: "https://apps.shopify.com/sms-notifications-1#reviews-heading",
    //               target: "new"
    //           }*/
    //     }
    //   });
    //
    //
    //   ShopifyApp.Bar.loadingOff();
    // });
  </script>
  <!--<link rel="stylesheet" type="text/css" href="seaff/seaff.css">-->
  <style>
    hr {
      margin: 15px 0px 10px 0px;
      padding: 0px;
      border-top: 0px;
      border-bottom: 1px solid #f4f4f4;
      height: 0px;
    }

    h1 {
      font-weight: bold;
    }

    .hidden {
      display: none;
    }
  </style>

  <!--<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">-->

</head>

<body>
<style>
</style>
<!--if user is authenticated we do not show this section, we can decide it on server-->
<div class="section {{connectAccountSectionClass}}" id="connectAccountSection" >
  <div class="section-summary">
    <h1>Connect your handwriting account</h1>
  </div>
  <div class="section-content">
    <button id="sign-in-button" class="" onclick="showAuthForm(this)">Connect account</button>
  </div>
</div>
<!--may be if user is not authenticated we do not show this section, we can decide it on server-->
<div class="section {{settingsSectionClass}} {{notificationPreferenceSectionClass}}" id="notificationPreferenceSection" >
  <div class="section-summary">
    <h1>Notification Preference</h1>
    <p>Select when to send card</p>
  </div>
  <div class="section-content">

    <div class="section-row">
      <div class="section-cell">
        <h3 style="border-bottom:1px solid #ccc;">Customers Account</h3>
        <div class="cell-container">

          <div class="cell-column">
            <div class="cell-container">
              <div class="cell-column">
                <label class="label-normal">Create:</label>
              </div>
              <div class="cell-column">
                <select id="customers_create_a" name="settings[customers][create][campaign]" disabled onchange="onCampaignSelect(this)" >
                  <option disabled selected>campaign id</option>
                  {{#each campaigns}}
                    <option value="{{this}}" >{{this}}</option>
                  {{/each}}
                </select>
                <label for="customers_create_a">Select Campaign</label>
              </div>
              <div class="cell-column">
                <input id="customers_create_c" type="checkbox" name="settings[customers][create][notify]" value="0" disabled >
                <label for="customers_create_c">Notify Customer</label>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<div class="section {{settingsSectionClass}}" id="createCampaignSection" >
  <div class="section-summary">
    <h1>Create a new campaign</h1>
  </div>
  <div class="section-content">
    <a
        href="https://hc-application-interface-test.firebaseapp.com/stationery/new/stationery"
        class="" target="_blank"
        rel="noopener noreferrer"
    >
      visit Handwriting service
    </a>
  </div>
</div>

<script type="text/javascript">
  let modalIsOpen = false;

  document.addEventListener('DOMContentLoaded', function() {
    // if (accountConnected) {
    //   loadCurrentHooks()
    //       .then((currentHooks) => {
    //         const value = '222eW346o2I0Y1aFxFxa';
    //         activateCreateCustomer(value);
    //         tryEnablePreferences();
    //       })
    //       .catch(error => {
    //         showErrorToast('Loading user campaigns data error');
    //         debug && console.error('auth error', error);
    //       });
    // }
  });

  function showErrorToast(message, duration = 5000) {
    const { Toast } = actions;
    const toastOptions = {
      message,
      duration,
      isError: true,
    };
    const toastError = Toast.create(app, toastOptions);
    toastError.dispatch(Toast.Action.SHOW);
  }

  function showAuthForm(button) {
    // app.getState().then((data) => {
    //   const {appInfo, loading, modal, navigation, pos, resourcePicker, staffMember, titleBar, toast} = data;
    //   console.log('getState data=',data)
    //   debugger;
    // });
    button.disabled = true;

    if (modalIsOpen) {
      return;
    }
    modalIsOpen = true;

    let authModal;
    const { Modal, Button } = actions;
    const okButton = Button.create(app, {label: 'Login'});
    okButton.subscribe(Button.Action.CLICK, function () {debugger
      // Do something with the click action
      okButton.set({disabled: true});
      const button = this;
      const email = '';
      const password = '';
      auth(email, password)
        .then(result => {
          accountConnected = true;

          const connectionSection = document.getElementById('connectAccountSection');
          connectionSection.classList.add('hidden');

          const createCampaignSection = document.getElementById('createCampaignSection');
          createCampaignSection.classList.remove('hidden');

          fillCampaignsSelect()
              .then(tryEnablePreferences)
              .catch(error => {
                showErrorToast('Loading user campaigns error');
                debug && console.error('Loading user campaigns error', error);
              });

          authModal.dispatch(Modal.Action.CLOSE);
        })
        .catch(error => {
          okButton.set({disabled: false});
          showErrorToast('Auth error');
          debug && console.error('auth error', error);
        });
    });
    const cancelButton = Button.create(app, {label: 'Cancel'});
    cancelButton.subscribe(Button.Action.CLICK, () => {
      // Do something with the click action
      authModal.dispatch(Modal.Action.CLOSE);
    });
    const modalOptions = {
      title: 'Connect Handwriting account',
      path: '/authForm.html',
      footer: {
        buttons: {
          primary: okButton,
          secondary: [cancelButton],
        },
      },
      size: Modal.Size.Medium,
    };
    authModal = Modal.create(app, modalOptions);

    authModal.subscribe(Modal.Action.CLOSE, () => {
      // Do something with the close event
      console.log('Modal.Action.CLOSE');
      modalIsOpen = false;
      button.disabled = false;
      authModal.unsubscribe();
    });

    authModal.subscribe(Modal.Action.OPEN, () => {
      // Do something with the close event
      console.log('Modal.Action.OPEN')
      modalIsOpen = true;
    });

    authModal.dispatch(Modal.Action.OPEN);
  }

  function auth(email, password) {
    if (!email || !password) {
      //return Promise.reject(new Error('email and password are required'));
    }
    const options = {
      method: 'POST',
      body: {
        email: email,
        password: password
      }
    };
    return fetch('/auth', options)
      .then((response) => {
        if (response.status === 403) {
          throw new Error(response.json.error_message);
        }
        return response.json();
      })
      .then((results) => {
        const api_key = results.user.api_key;
        return api_key;
      });
  }

  function connectHandwritingAccount() {

  }

  /*function activateCreateCustomer(value) {
    if (!value) {
      return;
    }
    const selectElement = document.getElementById('customers_create_a');
    for (let i = 0; i < selectElement.children.length; i++) {
      const option = selectElement.children[i];
      if (option.value === value) {
        option.selected = true;
        const notifyActiveElem = document.getElementById('customers_create_c');
        notifyActiveElem.disabled = false;
        notifyActiveElem.checked = true;
        if (selectElement.children[0]) {
          selectElement.children[0].selected = false;
        }
      }
    }
  }*/

  function tryEnablePreferences() {
    const selectElement = document.getElementById('customers_create_a');

    if (selectElement.children.length > 1) {
      selectElement.disabled = false;
      const preferenceSection = document.getElementById('notificationPreferenceSection');
      preferenceSection.classList.remove('hidden');
    }
  }

  function fillCampaignsSelect() {
    return loadUserCampaigns()
        .then((campaigns) => {
          const selectElement = document.getElementById('customers_create_a');
          campaigns.forEach(campaignId => {
            const optionElement = document.createElement('option');
            optionElement.value = campaignId;
            optionElement.innerHTML = campaignId;
            selectElement.append(optionElement);
          });
        });
  }

  function loadUserCampaigns() {
    //TODO may be we can do secure request, signed by shopify
    const options = {
      method: 'GET',
    };
    return fetch('/userCampaigns', options)
        .then((response) => {
          if (response.status === 403) {
            throw new Error(response.json.error_message);
          }
          return response.json();
        })
        .then((results) => results.campaigns);
  }

  function onCampaignSelect(select) {
    const value = select.value;
    const notifyActiveElem = document.getElementById('customers_create_c');
    if (value) {
      notifyActiveElem.disabled = false;
    } else {
      notifyActiveElem.checked = false;
      notifyActiveElem.disabled = true;
    }
  }

  // function loadCurrentHooks() {
  //   //TODO
  //   const currentHooks = [];
  //   return Promise.resolve(currentHooks);
  // }

  function addHookRecipientsToCampaign() {

  }
  function removeHookRecipientsToCampaign() {

  }
</script>
</body>

</html>
