<!doctype html>
<html>

<head>
  <title>{{appName}}</title>
  <link rel="stylesheet" type="text/css" href="/stylesheets/index.css">
  <!--<script  src="https://code.jquery.com/jquery-3.1.1.min.js"  integrity="sha256-hVVnYaiADRTO2PzUGmuLJr8BLUSjGIZsDYGmIJLv2b8="  crossorigin="anonymous"></script>-->
  <!--<script src="https://unpkg.com/@shopify/app-bridge@1"></script>-->
  <script src="https://unpkg.com/@shopify/app-bridge@1.6.7/umd/index.development.js"></script>
  <script type="text/javascript">
    var AppBridge = window['app-bridge'];
    var createApp = AppBridge.createApp;
    var actions = AppBridge.actions;
    var Redirect = actions.Redirect;
    var app;
    var accountConnected = {{accountConnected}};
    var initCustomerCreatedCampaignId = '{{customerCreatedCampaignId}}';
    var initCustomerCreatedNotifyActive = {{customerCreatedNotifyActive}};

    //TODO receive from template vars
    const debug = {{debug}};
    const shopOrigin = '{{shopOrigin}}';
    const apiKey = '{{apiKey}}';
    const serviceAddress = '{{serviceAddress}}';
    const state = '{{state}}';
    const scope = '{{scope}}';


    const redirectUri = serviceAddress + '/shopify/callback';
    const permissionUrl = '/oauth/authorize?client_id='
        + apiKey + '&state=' + state + '&scope=' + scope + '&redirect_uri=' + redirectUri;

    // If the current window is the 'parent', change the URL by setting location.href
    if (window.top == window.self) {
      window.location.assign('https://' + shopOrigin + '/admin' + permissionUrl);
    } else {
      app = createApp({
        apiKey: apiKey,
        shopOrigin: AppBridge.getShopOrigin(),
        debug,
      });

      const unsubscribe = app.error((data) => {
        // type will be the error type
        // action will contain the original action including its id
        // message will contain additional hints on how to fix the error
        const {type, action, message} = data;
        // Handle all errors here

        debugger;
      });

      //Redirect.create(app).dispatch(Redirect.Action.ADMIN_PATH, permissionUrl);

      const { TitleBar, Button } = actions;
      const redirect = Redirect.create(app);

      //saveButton
      const saveButton = Button.create(app, {label: 'Save'});
      saveButton.subscribe(Button.Action.CLICK, () => {
        //do save
        saveSettings()
            .then(() => {debugger
              //TODO
              redirect.dispatch({
                //type: Redirect.Action.APP,
                type: Redirect.Action.ADMIN_SECTION,
                payload: { path: '/' },
              });
            })
            .catch(error => {
              const { Toast } = actions;
              const toastOptions = {
                message: 'Error saving settings',
                duration: 5000,
                isError: true,
              };
              const toastError = Toast.create(app, toastOptions);
              toastError.dispatch(Toast.Action.SHOW);
              debug && console.error('saveSettings error', error);
            });
      });

      //titleBar
      const titleBarOptions = {
        title: 'Settings',
        buttons: {
          primary: saveButton,
        }
      };
      const myTitleBar = TitleBar.create(app, titleBarOptions);
    }
  </script>

  <!--<link rel="stylesheet" type="text/css" href="seaff/seaff.css">-->
  <style>
    hr {
      margin: 15px 0px 10px 0px;
      padding: 0px;
      border-top: 0px;
      border-bottom: 1px solid #f4f4f4;
      height: 0px;
    }

    h1 {
      font-weight: bold;
    }

    .hidden {
      display: none;
    }
  </style>


  {{#if accountConnected}}
  {{else}}
    <!--Connect account-->
    <link rel="stylesheet" href="https://code.getmdl.io/1.1.3/material.blue_grey-orange.min.css">
    <script defer src="https://code.getmdl.io/1.1.3/material.min.js"></script>
  {{/if}}

</head>

<body>
<style>
</style>
<!--if user is authenticated we do not show this section, we can decide it on server-->
<div class="section {{connectAccountSectionClass}}" id="connectAccountSection" >
  <div class="section-summary">
    <h1>Connect your handwriting account</h1>
  </div>
  <div class="section-content">
    <div class="mdl-card__supporting-text mdl-color-text--grey-600">
      <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
        <input class="mdl-textfield__input" type="email" id="sign-in-email">
        <label class="mdl-textfield__label" for="sign-in-email">Email</label>
      </div>
      <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
        <input class="mdl-textfield__input" type="password" id="sign-in-password">
        <label class="mdl-textfield__label" for="sign-in-password">Password</label>
      </div>
    </div>
    <button
        id="sign-in-button"
        class="mdl-color-text--grey-700 mdl-button--raised mdl-button mdl-js-button mdl-js-ripple-effect"
        onclick="connectAccount(this)"
    >
      Connect
    </button>
  </div>
</div>
<!--may be if user is not authenticated we do not show this section, we can decide it on server-->
<div class="section {{settingsSectionClass}} {{notificationPreferenceSectionClass}}" id="notificationPreferenceSection" >
  <div class="section-summary">
    <h1>Notification Preference</h1>
    <p>Select when to send card</p>
  </div>
  <div class="section-content">

    <div class="section-row">
      <div class="section-cell">
        <h3 style="border-bottom:1px solid #ccc;">Customers Account</h3>
        <div class="cell-container">

          <div class="cell-column">
            <div class="cell-container">
              <div class="cell-column">
                <label class="label-normal">Create:</label>
              </div>
              <div class="cell-column">
                <!--customerCreatedCampaignId-->
                <select
                    id="customers_create_a"
                    name="settings[customers][create][campaign]"
                    {{#if accountConnected}} {{else}}disabled{{/if}}
                    onchange="onCampaignSelect(this)"
                >
                  {{#each campaignsOptions}}
                    {{{this}}}
                  {{/each}}
                </select>
                <label for="customers_create_a">Select Campaign</label>
              </div>
              <div class="cell-column">
                <!--customerCreatedNotifyActive-->
                <input
                    id="customers_create_c"
                    type="checkbox"
                    name="settings[customers][create][notify]"
                    {{customerCreatedNotifyActiveChecked}}
                    {{customerCreatedNotifyActiveDisabled}}
                >
                <label for="customers_create_c">Notify Customer</label>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<div class="section {{settingsSectionClass}}" id="createCampaignSection" >
  <div class="section-summary">
    <h1>Create a new campaign</h1>
  </div>
  <div class="section-content">
    <a
        href="https://hc-application-interface-test.firebaseapp.com/stationery/new/stationery"
        class="" target="_blank"
        rel="noopener noreferrer"
    >
      visit Handwriting service
    </a>
  </div>
</div>

<script type="text/javascript">
  let modalIsOpen = false;

  // document.addEventListener('DOMContentLoaded', function() {
  //
  // });

  function showErrorToast(message, duration = 5000) {
    const { Toast } = actions;
    const toastOptions = {
      message,
      duration,
      isError: true,
    };
    const toastError = Toast.create(app, toastOptions);
    toastError.dispatch(Toast.Action.SHOW);
  }

  function connectHandwritingAccount() {

  }

  /*function activateCreateCustomer(value) {
    if (!value) {
      return;
    }
    const selectElement = document.getElementById('customers_create_a');
    for (let i = 0; i < selectElement.children.length; i++) {
      const option = selectElement.children[i];
      if (option.value === value) {
        option.selected = true;
        const notifyActiveElem = document.getElementById('customers_create_c');
        notifyActiveElem.disabled = false;
        notifyActiveElem.checked = true;
        if (selectElement.children[0]) {
          selectElement.children[0].selected = false;
        }
      }
    }
  }*/

  function tryEnablePreferences() {
    const selectElement = document.getElementById('customers_create_a');

    if (selectElement.children.length > 1) {
      selectElement.disabled = false;
      const preferenceSection = document.getElementById('notificationPreferenceSection');
      preferenceSection.classList.remove('hidden');
    }
  }

  function fillCampaignsSelect() {
    return loadUserCampaigns()
        .then((campaigns) => {
          const selectElement = document.getElementById('customers_create_a');
          campaigns.forEach(campaignId => {
            const optionElement = document.createElement('option');
            optionElement.value = campaignId;
            optionElement.innerHTML = campaignId;
            selectElement.append(optionElement);
          });
        });
  }

  function loadUserCampaigns() {
    //TODO may be we can do secure request, signed by shopify
    const options = {
      method: 'GET',
    };
    return fetch('/userCampaigns', options)
        .then((response) => {
          if (response.status === 403) {
            throw new Error(response.json.error_message);
          }
          return response.json();
        })
        .then((results) => results.campaigns);
  }

  function onCampaignSelect(select) {
    const value = select.value;
    const notifyActiveElem = document.getElementById('customers_create_c');
    if (value) {
      notifyActiveElem.disabled = false;
    } else {
      notifyActiveElem.checked = false;
      notifyActiveElem.disabled = true;
    }
  }

  function connectAccount(button) {
    const email = document.getElementById('sign-in-email').value;
    const password = document.getElementById('sign-in-password').value;

    if (!email || !password) {
      return showErrorToast('email and password are required');
    }
    button.disabled = true;
    //TODO add email validation
    const options = {
      method: 'POST',
      body: JSON.stringify({email: email, password: password, shop: AppBridge.getShopOrigin()}),
      headers: {
        'Content-Type': 'application/json',
      },
    };
    fetch('/shopify/connectAccount', options)
        .then((response) => {
          if (response.status === 403) {
            throw new Error('email and password are required');
          }
          if (response.status > 299) {
            throw new Error('Authentication error');
          }
          return response.json();
        })
        // .then((results) => {
        //   const api_key = results.user.api_key;
        //   return api_key;
        // })
        .then(() => {
          const { Toast } = actions;
          const toastOptions = {
            message: 'Account connected',
            duration: 5000,
          };
          const toastError = Toast.create(app, toastOptions);
          toastError.dispatch(Toast.Action.SHOW);
        })
        .catch(error => {
          button.disabled = false;
          showErrorToast(error.message);
          debug && console.error('Auth error', error);
          throw error;
        })
        .then(result => {
          accountConnected = true;

          const connectionSection = document.getElementById('connectAccountSection');
          connectionSection.classList.add('hidden');

          const createCampaignSection = document.getElementById('createCampaignSection');
          createCampaignSection.classList.remove('hidden');

          fillCampaignsSelect()
              .then(tryEnablePreferences)
              .catch(error => {
                showErrorToast('Loading user campaigns error. Please, reload application');
                debug && console.error('Loading user campaigns error', error);
              });
        })
        .catch(error => {});
  }

  function saveSettings() {
    const initCampaignId = initCustomerCreatedCampaignId;
    const initNotifyActive = initCustomerCreatedNotifyActive;
    const selectElement = document.getElementById('customers_create_a');
    const selectedIndex = selectElement.selectedIndex;
    const campaignId = selectedIndex === 0 ? '' : selectElement.options[selectedIndex].value;
    const notifyActiveElem = document.getElementById('customers_create_c');
    const notifyActive = notifyActiveElem.checked;

    const changed = initCampaignId !== campaignId || initNotifyActive !== notifyActive;
    if (!changed) return Promise.resolve();

    const data = {shop: AppBridge.getShopOrigin()};
    if (initCampaignId !== campaignId) {
      data.customerCreatedCampaignId = campaignId;
    }
    if (initNotifyActive !== notifyActive) {
      data.customerCreatedNotifyActive = notifyActive;
    }

    const options = {
      method: 'POST',
      body: JSON.stringify(data),
      headers: {
        'Content-Type': 'application/json',
      },
    };
    return fetch('/shopify/saveSettings', options)
        .then((response) => {
          if (response.status > 299) {
            throw new Error('Saving settings error');
          }
          return response.json();
        });
  }

</script>
</body>

</html>
